---
interface NavLink {
    label: string;
    url: string;
}

type NavigationProps = {
    navLinks: NavLink[];
    id: string;
};

const { navLinks, id } = Astro.props as NavigationProps;
const currentPath = new URL(Astro.request.url).pathname;
---

<nav class="nav" id={id}>
    {
        navLinks.map((link: NavLink) => (
            <a
                class={`nav-link ${currentPath.includes(link.url) ? "active" : ""}`}
                href={link.url}
            >
                {link.label}
            </a>
        ))
    }
</nav>

<!-- Styles -->
<style>
    .nav {
        display: flex;
        gap: 2rem;
        flex-wrap: wrap;
        padding: 2rem;
    }

    .nav-toggle {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0.625rem;
    }

    .nav-link {
        padding-inline: 0.25rem;
    }

    .nav-link.active {
        font-weight: bold;
        text-decoration: none;
        cursor: default;
        pointer-events: none;
        background-image: linear-gradient(
            0deg,
            var(--color-secondary) 50%,
            transparent 50%
        );
    }

    @media (max-width: calc(58em - 1px)) {
        :global(header) {
            position: relative;
        }

        .nav {
            flex-direction: column;
            align-items: start;
            border: none;
            border-radius: 0;
            background: none;
            box-shadow: none;
            top: 100%;
        }

        .nav-link {
            font-size: 1.2rem;
        }

        .nav-toggle {
            order: 1;
        }
    }

    @media (min-width: 58em) {
        .nav {
            padding: 1rem 2rem;
            /* border: 1px solid; */
            border-radius: 100vmax;
        }

        .nav-toggle {
            display: none;
        }
    }
</style>
